LOAD/SAVE

spark.sql.sources.default  its default to parquet


val usersDF = spark.read.load("file:///home/trainings/SAIWS/BATCHES/BATCH181217/Datasets/users.parquet")
usersDF.select("name", "favorite_color").write.save("file:///home/trainings/SAIWS/BATCHES/BATCH181217/Output/namesAndFavColors.parquet")
 import org.apache.spark.sql._; --SaveMode
usersDF.select("name", "favorite_color").write.mode(SaveMode.Overwrite).save("file:///home/trainings/SAIWS/BATCHES/BATCH181217/Output/namesAndFavColors.parquet")


Manually Specifying Options

val peopleDF = spark.read.format("json").load("file:///home/trainings/SAIWS/BATCHES/BATCH181217/Datasets/people.json")
peopleDF.select("name", "age").write.format("parquet").save("namesAndAges.parquet")


val sqlDF = spark.sql("SELECT * FROM parquet.`examples/src/main/resources/users.parquet`")

Save Modes

SaveMode.ErrorIfExists
SaveMode.Append
SaveMode.Overwrite
SaveMode.Ignore

Saving to Persistent Tables


peopleDF.write.bucketBy(42, "name").sortBy("age").saveAsTable("people_bucketed")

usersDF.write.partitionBy("favorite_color").format("parquet").save("namesPartByColor.parquet")

peopleDF
  .write
  .partitionBy("favorite_color")
  .bucketBy(42, "name")
  .saveAsTable("people_partitioned_bucketed")
  
  // Encoders for most common types are automatically provided by importing spark.implicits._
import spark.implicits._

val peopleDF = spark.read.json("examples/src/main/resources/people.json")

// DataFrames can be saved as Parquet files, maintaining the schema information
peopleDF.write.parquet("people.parquet")

// Read in the parquet file created above
// Parquet files are self-describing so the schema is preserved
// The result of loading a Parquet file is also a DataFrame
val parquetFileDF = spark.read.parquet("people.parquet")

// Parquet files can also be used to create a temporary view and then used in SQL statements
parquetFileDF.createOrReplaceTempView("parquetFile")
val namesDF = spark.sql("SELECT name FROM parquetFile WHERE age BETWEEN 13 AND 19")
namesDF.map(attributes => "Name: " + attributes(0)).show()
// +------------+
// |       value|
// +------------+
// |Name: Justin|
// +------------+


